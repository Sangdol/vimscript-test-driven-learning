#
# Sources
# https://learnxinyminutes.com/docs/vimscript/
#

Execute (multiline):
  AssertEqual 'a b', 'a
    \ b'

  AssertEqual [1, 2], [1,
    \ 2]


Execute (arithmetic operations):
  AssertEqual 1 / 2, 0
  AssertEqual 1 / 2.0, 0.5

  AssertEqual 1 % 2, 1


" :h =~
Execute (boolean / equality / comparison):
  Assert 1 == 1
  Assert 1 != 2
  Assert 2 > 1
  Assert 1 >= 1
  Assert 1 < 2
  Assert 1 <= 2
  " Identity
  Assert 1 is 1
  Assert 1 isnot 2

  " Regex
  Assert "123" =~ "1"
  Assert "123" =~ '\d'
  Assert "123" =~ "\\d"
  Assert "abc" !~ "\\d"
  Assert "1bc" =~ "\\d"
  Assert "ab1" =~ "\\d"


" v: - global, predefined by vim
Execute (boolean operations):
  Assert ! v:false
  Assert v:true && v:true
  Assert v:false || v:true
  AssertEqual v:false ? 'yes' : 'no', 'no'


Execute (strings):
  " two single quotes become one quote
  AssertEqual  'a''b', "a'b"

  " . and .. can be used but .. is preferred in new vim since . is ambiguous
  " https://vi.stackexchange.com/questions/31635/on-string-concatenation-whats-the-difference-between-and-single-dot-and
  AssertEqual 'a' . 'b', 'ab'
  AssertEqual 'a' .. 'b', 'ab'

  AssertEqual 'abc'[0], 'a'
  " second index is inclusive
  AssertEqual 'abc'[1:2], 'bc'
  AssertEqual 'abc'[1:-1], 'bc'
  AssertEqual 'abc'[1:], 'bc'
  AssertEqual 'abc'[:2], 'abc'
  AssertEqual 'abc'[-2:], 'bc'


Execute (list):
  AssertEqual [1, 2] + [3, 4], [1, 2, 3, 4]
  AssertEqual [1, 2, 3][0], 1
  AssertEqual [1, 2, 3][-1], 3
  AssertEqual [1, 2, 3][-2:], [2, 3]


Execute (variables):
  " Global has to start with a capital letter
  let IsString = {x -> type(x) == type('')}
  Assert IsString('a')

  " Destructuring assignment
  let [x, y] = [1, 2]
  AssertEqual x, 1
  AssertEqual y, 2

  let [a, b; c] = [1, 2, 3, 4, 5]
  AssertEqual a, 1
  AssertEqual b, 2
  AssertEqual c, [3, 4, 5]


" Truthy and falsey values: https://vi.stackexchange.com/questions/36270/what-values-are-truthy-and-falsey
Execute (truthy falsey):
  " Truthy
  " Non-zero numbers or strings starting with a non-zero number (but '01' is true...)
  AssertEqual 1 ? 'yes' : 'no', 'yes'
  AssertEqual '1' ? 'yes' : 'no', 'yes'
  AssertEqual '1a' ? 'yes' : 'no', 'yes'
  AssertEqual '01' ? 'yes' : 'no', 'yes'
  AssertEqual '001' ? 'yes' : 'no', 'yes'

  " Falsey
  AssertEqual 'a' ? 'yes' : 'no', 'no'
  AssertEqual 'abc' ? 'yes' : 'no', 'no'
  AssertEqual 0 ? 'yes' : 'no', 'no'
  AssertEqual '' ? 'yes' : 'no', 'no'
  AssertEqual '0' ? 'yes' : 'no', 'no'
  AssertEqual '+1' ? 'yes' : 'no', 'no'

  " Error: E745: Using a List as a Number
  AssertThrows [1] ? 'yes' : 'no', 'yes'
  " Error: E728: Using a Dictionary as a Number
  AssertThrows {} ? 'yes' : 'no', 'yes'


Execute (if statement):
  if v:true
    Assert 1
  elseif v:false
    Assert 0
  else
    Assert 0
  endif


Execute (loops):
  for c in ['a', 'b', 'c']
    Assert 'abc' =~ c
  endfor

  for [x, y] in [[1, 0], [1, 1]]
    Assert x <= 1 && y >= 0
  endfor

  " 0~10
  for i in range(10, 0, -1)
    Assert 0 <= i && i <= 10
  endfor

  let counter = 0
  while counter < 10
    Assert counter < 10
    let counter += 1
  endwhile


Execute (dict loops):
  let d = {'a': 1, 'b': 2}

  for k in keys(d)
    Assert k == 'a' || k == 'b'
  endfor

  for v in values(d)
    Assert 1 <= v && v <= 2
  endfor

  for [k, v] in items(d)
    Assert k == 'a' || k == 'b'
    Assert 1 <= v && v <= 2
  endfor


Execute (exception handling):
  try
    throw "hallo"
  catch /hal/
    Assert 1
  catch /.*/
    Assert 0
  finnaly
    Assert 1
  endtry


Execute (let-unpack / destructuring):
  let [start, end] = split('1,2', ',')

  Assert start == 1
  Assert end == 2

  " This doesn't work - E688: More targets than List items
    "let [start, end] = split('1', ',')
