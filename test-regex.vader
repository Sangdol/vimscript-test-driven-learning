#
# Regex
#
# |pattern|
#

# * (0 or more) greedy matching
# \+ (1 or more) greedy matching
# \{-} (0 or more) non-greedy matching
# \{-n,} (at least n) non-greedy matching

"
" Greedy
"
Given (text):
  "name": "sang"

Execute (greedy):
  s/\v(".+").*/\1/

Expect (both):
  "name": "sang"

"
" Non-greedy
"
Given (text):
  "name": "sang"

Execute (non greedy):
  s/\v(".{-}").*/\1/

Expect (only first):
  "name"

"
" Lookahead
"
Execute (lookahead):
  " :h @=
  " only matches 'foo' in 'foobar'
  AssertEqual substitute('foobar', '\vfoo(bar)@=', 'bar', ''), 'barbar'

  " matches nothing since @= is a zero-width expression
  AssertEqual substitute('foobarfoo', '\vfoo(bar)@=foo', 'bar', ''), 'foobarfoo'

Execute (lookahead: negative):
  AssertEqual substitute('foobar', '\vfoo(bar)@!', 'bar', ''), 'foobar'
  AssertEqual substitute('foofoo', '\vfoo(bar)@!', 'bar', ''), 'barfoo'

Execute (lookahead: \ze - \z + end):
  AssertEqual substitute('foobar', '\vfoo\zebar', 'bar', ''), 'barbar'
  " This behavior is different from @=
  AssertEqual substitute('foobarfoo', '\vfoo\ze(bar)foo', 'bar', ''), 'barbarfoo'

