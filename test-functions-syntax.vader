#
# Functions syntax
#

Execute (script local function):
  function! s:identity(n)
    return a:n
  endfunction

  " Need to do `call s:identity()` when calling it without assigning
  " since vim regards `s:identity()` as a substitute and
  " throws 'pattern not found' exception.
  let res = s:identity(1)
  AssertEqual res, 1


Execute (funcref):
  AssertEqual function('type')(100), 0

  " lambda
  " The body cannot be a sequence of Ex commands.
  AssertEqual {x -> x * x}(4), 16
  AssertEqual {-> 1}(), 1

  " partial function
  AssertEqual function('substitute', ['hello'])('e', 'a', ''), 'hallo'

  function! Square(n)
    return a:n * a:n
  endfunction

  " funcref (vs. function)
  "  - look up by refererence
  "  - only for user defined function
  AssertEqual funcref('Square')(2), 4


Execute (call and execute):
  function! ReturnThree()
    return 3
  endfunction

  let three = call(funcref('ReturnThree'), [])

  AssertEqual three, 3

  function! EchoThree()
    echo 3
  endfunction

  let weirdThree = execute('call EchoThree()')

  " weirdThree becomes something like '^@3'. why?
  " ^@ is a null character that can be added
  " when there's a newline character.
  " Somehow `execute` adds it.
  AssertNotEqual weirdThree, '3'
  AssertEqual substitute(weirdThree, '\n', '', ''), '3'


Execute (closure):
  function! MakeAdder(x)
    function! Adder(n) closure
      return a:x + a:n
    endfunction
    return funcref('Adder')
  endfunction

  let AddFive = MakeAdder(5)
  AssertEqual AddFive(3), 8


Execute (dictionary functions 1):
  function! Mylen() dict
    return len(self.data)
  endfunction

  let d = {'data': [1, 2, 3], 'len': funcref('Mylen')}

  AssertEqual d.len(), 3


Execute (dictionary functions 2):
  let d = {'data': [1, 2, 3]}

  " The `dict` keyword is not necessary.
  function d.len()
    return len(self.data)
  endfunction

  AssertEqual d.len(), 3


Execute (Variable arguments):
  function! Args(...)
    return a:
  endfunction

  " '0': number of arguments
  " '000': arguments
  AssertEqual Args(), {'0': 0, '000': [], 'firstline': 1, 'lastline': 1}
  AssertEqual Args('a'), {'0': 1, '000': ['a'], '1': 'a', 'firstline': 1, 'lastline': 1}

  function! Args2(a, b, ...) abort
    let c = get(a:, 1, '')
    let d = get(a:, 2, '')
    return [a:a, a:b, c, d]
  endfunction

  AssertEqual Args2('a', 'b'), ['a', 'b', '', '']
  AssertEqual Args2('a', 'b', 'c'), ['a', 'b', 'c', '']
  AssertEqual Args2('a', 'b', 'c', 'd'), ['a', 'b', 'c', 'd']

Execute (default arguments):
  function! Args(...)
    return get(a:, 1, 100)
  endfunction

  AssertEqual Args(), 100
  AssertEqual Args(10), 10

